
PathFinder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000b4  00000276  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  000002f5  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092e  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000605  00000000  00000000  00000c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ac  00000000  00000000  000012a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f7  00000000  00000000  0000178b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001f2  000001f2  000002e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.triggerSonar 00000014  000001de  000001de  000002d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000028  00000182  00000182  00000276  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_5 000000ce  000000b4  000000b4  000001a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .data.rising  00000001  00800066  00000200  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .bss.distance 00000002  00800060  00800060  000002f5  2**0
                  ALLOC
 19 .bss.fallingTime 00000002  00800062  00800062  000002f5  2**0
                  ALLOC
 20 .bss.risingTime 00000002  00800064  00800064  000002f5  2**0
                  ALLOC
 21 .text.libgcc.mul 0000001e  000001aa  000001aa  0000029e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_fini 00000002  000001fa  000001fa  000002ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  000001fc  000001fc  000002f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  000001fe  000001fe  000002f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  000001c8  000001c8  000002bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  000001f6  000001f6  000002ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
   8:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
   c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  10:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_etext>
  18:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  1c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  20:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  24:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  28:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  2c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  30:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  34:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  38:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  3c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  40:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  44:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  48:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  4c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
  50:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 66       	ori	r16, 0x60	; 96
  58:	80 00       	.word	0x0080	; ????
  5a:	66 00       	.word	0x0066	; ????
  5c:	67 00       	.word	0x0067	; ????
  5e:	02 00       	.word	0x0002	; ????

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d4 e0       	ldi	r29, 0x04	; 4
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	e4 e5       	ldi	r30, 0x54	; 84
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	17 c0       	rjmp	.+46     	; 0xa2 <__do_clear_bss+0x8>
  74:	b5 91       	lpm	r27, Z+
  76:	a5 91       	lpm	r26, Z+
  78:	35 91       	lpm	r19, Z+
  7a:	25 91       	lpm	r18, Z+
  7c:	05 91       	lpm	r16, Z+
  7e:	07 fd       	sbrc	r16, 7
  80:	0c c0       	rjmp	.+24     	; 0x9a <__do_clear_bss>
  82:	95 91       	lpm	r25, Z+
  84:	85 91       	lpm	r24, Z+
  86:	ef 01       	movw	r28, r30
  88:	f9 2f       	mov	r31, r25
  8a:	e8 2f       	mov	r30, r24
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0x20>
  96:	fe 01       	movw	r30, r28
  98:	04 c0       	rjmp	.+8      	; 0xa2 <__do_clear_bss+0x8>

0000009a <__do_clear_bss>:
  9a:	1d 92       	st	X+, r1
  9c:	a2 17       	cp	r26, r18
  9e:	b3 07       	cpc	r27, r19
  a0:	e1 f7       	brne	.-8      	; 0x9a <__do_clear_bss>
  a2:	e0 36       	cpi	r30, 0x60	; 96
  a4:	f4 07       	cpc	r31, r20
  a6:	31 f7       	brne	.-52     	; 0x74 <__do_copy_data+0x8>
  a8:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  ac:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <exit>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>

Disassembly of section .text:

000001f2 <__bad_interrupt>:
 1f2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.triggerSonar:

000001de <triggerSonar>:
uint16_t fallingTime = 0;
uint16_t distance = 0;
volatile unsigned char rising = 1;

void triggerSonar(){
	PORTD|=(1<<trigger);
 1de:	82 b3       	in	r24, 0x12	; 18
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	85 e0       	ldi	r24, 0x05	; 5
 1e6:	8a 95       	dec	r24
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <triggerSonar+0x8>
	_delay_us(15);
	PORTD &=~(1<<trigger);
 1ea:	82 b3       	in	r24, 0x12	; 18
 1ec:	8e 7f       	andi	r24, 0xFE	; 254
 1ee:	82 bb       	out	0x12, r24	; 18
 1f0:	08 95       	ret

Disassembly of section .text.main:

00000182 <main>:
}

int main(void) {	
	DDRA |= (1<<led2) | (1<<led);
 182:	8a b3       	in	r24, 0x1a	; 26
 184:	89 60       	ori	r24, 0x09	; 9
 186:	8a bb       	out	0x1a, r24	; 26
	//PORTA |= (1<<led);
	DDRD |= (1<<trigger);
 188:	81 b3       	in	r24, 0x11	; 17
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1<<echo);
 18e:	81 b3       	in	r24, 0x11	; 17
 190:	8b 7f       	andi	r24, 0xFB	; 251
 192:	81 bb       	out	0x11, r24	; 17

	TCCR1A = 0;	
 194:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1<<ICES1); // detect rising edge
 196:	8e b5       	in	r24, 0x2e	; 46
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<TICIE1);
 19c:	89 b7       	in	r24, 0x39	; 57
 19e:	80 62       	ori	r24, 0x20	; 32
 1a0:	89 bf       	out	0x39, r24	; 57

	sei();
 1a2:	78 94       	sei
	triggerSonar();
 1a4:	0e 94 ef 00 	call	0x1de	; 0x1de <triggerSonar>
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <main+0x26>

Disassembly of section .text.__vector_5:

000000b4 <__vector_5>:
		//triggerSonar();
	}

}

ISR(TIMER1_CAPT_vect) {
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
	if(rising){
  d6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <rising>
  da:	88 23       	and	r24, r24
  dc:	79 f0       	breq	.+30     	; 0xfc <__vector_5+0x48>
		risingTime = ICR1;
  de:	86 b5       	in	r24, 0x26	; 38
  e0:	97 b5       	in	r25, 0x27	; 39
  e2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <risingTime+0x1>
  e6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <risingTime>
		TCCR1B &= ~(1<<ICES1);	// detect falling edge next time
  ea:	8e b5       	in	r24, 0x2e	; 46
  ec:	8f 7b       	andi	r24, 0xBF	; 191
  ee:	8e bd       	out	0x2e, r24	; 46
		TCCR1B |= (1<<CS10);	// start timer
  f0:	8e b5       	in	r24, 0x2e	; 46
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	8e bd       	out	0x2e, r24	; 46
		rising =0;
  f6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <rising>
  fa:	32 c0       	rjmp	.+100    	; 0x160 <__vector_5+0xac>
	}else{
		fallingTime = ICR1;
  fc:	86 b5       	in	r24, 0x26	; 38
  fe:	97 b5       	in	r25, 0x27	; 39
 100:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <fallingTime+0x1>
 104:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <fallingTime>
		TCCR1B |= (1<<ICES1);	// detect rising edge next time
 108:	8e b5       	in	r24, 0x2e	; 46
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	8e bd       	out	0x2e, r24	; 46
		rising = 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <rising>
		TCCR1B &= ~(1<<CS10);	// stop the timer
 114:	8e b5       	in	r24, 0x2e	; 46
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0;
 11a:	1d bc       	out	0x2d, r1	; 45
 11c:	1c bc       	out	0x2c, r1	; 44
		distance = (fallingTime)/58;
 11e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <fallingTime>
 122:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <fallingTime+0x1>
 126:	af e9       	ldi	r26, 0x9F	; 159
 128:	b6 e4       	ldi	r27, 0x46	; 70
 12a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__umulhisi3>
 12e:	92 95       	swap	r25
 130:	82 95       	swap	r24
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	89 27       	eor	r24, r25
 136:	9f 70       	andi	r25, 0x0F	; 15
 138:	89 27       	eor	r24, r25
 13a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 13e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		triggerSonar();
 142:	0e 94 ef 00 	call	0x1de	; 0x1de <triggerSonar>
		if(distance < 20){
 146:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 14e:	44 97       	sbiw	r24, 0x14	; 20
 150:	20 f4       	brcc	.+8      	; 0x15a <__vector_5+0xa6>
			PORTA |= (1<<led);
 152:	8b b3       	in	r24, 0x1b	; 27
 154:	81 60       	ori	r24, 0x01	; 1
 156:	8b bb       	out	0x1b, r24	; 27
 158:	03 c0       	rjmp	.+6      	; 0x160 <__vector_5+0xac>
			}else{
			PORTA &= ~(1<<led);
 15a:	8b b3       	in	r24, 0x1b	; 27
 15c:	8e 7f       	andi	r24, 0xFE	; 254
 15e:	8b bb       	out	0x1b, r24	; 27
		}
	}

	
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	bf 91       	pop	r27
 166:	af 91       	pop	r26
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	7f 91       	pop	r23
 16e:	6f 91       	pop	r22
 170:	5f 91       	pop	r21
 172:	4f 91       	pop	r20
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

Disassembly of section .text.libgcc.mul:

000001aa <__umulhisi3>:
 1aa:	a2 9f       	mul	r26, r18
 1ac:	b0 01       	movw	r22, r0
 1ae:	b3 9f       	mul	r27, r19
 1b0:	c0 01       	movw	r24, r0
 1b2:	a3 9f       	mul	r26, r19
 1b4:	70 0d       	add	r23, r0
 1b6:	81 1d       	adc	r24, r1
 1b8:	11 24       	eor	r1, r1
 1ba:	91 1d       	adc	r25, r1
 1bc:	b2 9f       	mul	r27, r18
 1be:	70 0d       	add	r23, r0
 1c0:	81 1d       	adc	r24, r1
 1c2:	11 24       	eor	r1, r1
 1c4:	91 1d       	adc	r25, r1
 1c6:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000001fa <_fini>:
 1fa:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001fc <__funcs_on_exit>:
 1fc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001fe <__simulator_exit>:
 1fe:	08 95       	ret

Disassembly of section .text.exit:

000001c8 <exit>:
 1c8:	ec 01       	movw	r28, r24
 1ca:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__funcs_on_exit>
 1ce:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_fini>
 1d2:	ce 01       	movw	r24, r28
 1d4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__simulator_exit>
 1d8:	ce 01       	movw	r24, r28
 1da:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Exit>

Disassembly of section .text._Exit:

000001f6 <_Exit>:
 1f6:	0e 94 58 00 	call	0xb0	; 0xb0 <_exit>
