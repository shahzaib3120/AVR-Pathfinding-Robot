
PathFinder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000089b  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000089b  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 000000c4  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ccb  00000000  00000000  00000a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b0  00000000  00000000  000016d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004fd  00000000  00000000  00001d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d5  00000000  00000000  000023dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ad  00000000  00000000  000025b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000295e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000076c  0000076c  00000880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000029c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.moveForward 0000006a  00000516  00000516  0000062a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.turnLeft 00000072  00000432  00000432  00000546  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.turnRight 00000072  000004a4  000004a4  000005b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.triggerSonar 00000014  000006e4  000006e4  000007f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    000000ee  000000c8  000000c8  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_1 00000036  00000622  00000622  00000736  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__vector_9 00000014  000006f8  000006f8  0000080c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_4 00000014  0000070c  0000070c  00000820  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_2 00000036  00000658  00000658  0000076c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_5 000000ca  00000368  00000368  0000047c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.rightCount 00000002  00800068  00800068  0000089b  2**0
                  ALLOC
 25 .bss.leftCount 00000002  0080006a  0080006a  0000089b  2**0
                  ALLOC
 26 .data.leftDutyCycle 00000004  00800060  0000077a  0000088e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 27 .data.rightDutyCycle 00000004  00800064  0000077e  00000892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 28 .bss.obstacle 00000001  00800072  00800072  0000089b  2**0
                  ALLOC
 29 .data.threshold 00000002  0080006c  00000782  00000896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 30 .data.rising  00000001  00800073  00000786  0000089a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 31 .data.distance 00000002  0080006e  00000784  00000898  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 32 .bss.fallingTime 00000002  00800070  00800070  0000089b  2**0
                  ALLOC
 33 .text         00000008  00000756  00000756  0000086a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text         000000de  000001b6  000001b6  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text         0000005e  00000580  00000580  00000694  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text         0000000c  0000074a  0000074a  0000085e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text         00000006  00000766  00000766  0000087a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text         0000000e  00000720  00000720  00000834  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text         0000000e  0000072e  0000072e  00000842  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text         00000022  0000068e  0000068e  000007a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text         00000044  000005de  000005de  000006f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text         0000000e  0000073c  0000073c  00000850  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text         00000008  0000075e  0000075e  00000872  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text         000000d4  00000294  00000294  000003a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.libgcc.mul 0000001e  000006b0  000006b0  000007c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.__dummy_fini 00000002  00000774  00000774  00000888  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.__dummy_funcs_on_exit 00000002  00000776  00000776  0000088a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.__dummy_simulator_exit 00000002  00000778  00000778  0000088c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.exit    00000016  000006ce  000006ce  000007e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text._Exit   00000004  00000770  00000770  00000884  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_1>
   8:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_2>
   c:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>
  10:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_4>
  14:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_5>
  18:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>
  1c:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>
  20:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>
  24:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__vector_9>
  28:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>
  2c:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>
  30:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>
  34:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>
  38:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>
  3c:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>
  40:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>
  44:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>
  48:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>
  4c:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>
  50:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 68       	ori	r16, 0x80	; 128
  58:	00 07       	cpc	r16, r16
  5a:	7a 00       	.word	0x007a	; ????
  5c:	68 00       	.word	0x0068	; ????
  5e:	6c 80       	ldd	r6, Y+4	; 0x04
  60:	00 6c       	ori	r16, 0xC0	; 192
  62:	00 70       	andi	r16, 0x00	; 0
  64:	00 07       	cpc	r16, r16
  66:	82 00       	.word	0x0082	; ????
  68:	70 00       	.word	0x0070	; ????
  6a:	73 80       	ldd	r7, Z+3	; 0x03
  6c:	00 73       	andi	r16, 0x30	; 48
  6e:	00 74       	andi	r16, 0x40	; 64
  70:	00 07       	cpc	r16, r16
  72:	86 00       	.word	0x0086	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e4 e5       	ldi	r30, 0x54	; 84
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e3 37       	cpi	r30, 0x73	; 115
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 64 00 	call	0xc8	; 0xc8 <_etext>
  c0:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

0000076c <__bad_interrupt>:
 76c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.moveForward:

00000516 <moveForward>:
int leftCount = 0;
int rightCount = 0;


void moveForward() {
	leftCount = 0;
 516:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <leftCount+0x1>
 51a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <leftCount>
	rightCount = 0;
 51e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <rightCount+0x1>
 522:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <rightCount>
	while(leftCount <=40 && rightCount<=40 ){
 526:	16 c0       	rjmp	.+44     	; 0x554 <moveForward+0x3e>
		if(!obstacle){
 528:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <obstacle>
 52c:	81 11       	cpse	r24, r1
 52e:	0c c0       	rjmp	.+24     	; 0x548 <moveForward+0x32>
			PORTB |= (1<<RF);
 530:	88 b3       	in	r24, 0x18	; 24
 532:	81 60       	ori	r24, 0x01	; 1
 534:	88 bb       	out	0x18, r24	; 24
			PORTB |= (1<<LF);
 536:	88 b3       	in	r24, 0x18	; 24
 538:	80 61       	ori	r24, 0x10	; 16
 53a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53c:	87 ea       	ldi	r24, 0xA7	; 167
 53e:	91 e6       	ldi	r25, 0x61	; 97
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <moveForward+0x2a>
 544:	00 c0       	rjmp	.+0      	; 0x546 <moveForward+0x30>
 546:	00 00       	nop
			_delay_ms(100);
		}
		PORTB &= ~(1<<RF);
 548:	88 b3       	in	r24, 0x18	; 24
 54a:	8e 7f       	andi	r24, 0xFE	; 254
 54c:	88 bb       	out	0x18, r24	; 24
		PORTB &= ~(1<<LF);
 54e:	88 b3       	in	r24, 0x18	; 24
 550:	8f 7e       	andi	r24, 0xEF	; 239
 552:	88 bb       	out	0x18, r24	; 24


void moveForward() {
	leftCount = 0;
	rightCount = 0;
	while(leftCount <=40 && rightCount<=40 ){
 554:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <leftCount>
 558:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <leftCount+0x1>
 55c:	89 97       	sbiw	r24, 0x29	; 41
 55e:	34 f4       	brge	.+12     	; 0x56c <moveForward+0x56>
 560:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightCount>
 564:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightCount+0x1>
 568:	89 97       	sbiw	r24, 0x29	; 41
 56a:	f4 f2       	brlt	.-68     	; 0x528 <moveForward+0x12>
 56c:	9f e9       	ldi	r25, 0x9F	; 159
 56e:	26 e8       	ldi	r18, 0x86	; 134
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	91 50       	subi	r25, 0x01	; 1
 574:	20 40       	sbci	r18, 0x00	; 0
 576:	80 40       	sbci	r24, 0x00	; 0
 578:	e1 f7       	brne	.-8      	; 0x572 <moveForward+0x5c>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <moveForward+0x66>
 57c:	00 00       	nop
 57e:	08 95       	ret

Disassembly of section .text.turnLeft:

00000432 <turnLeft>:
	}
	_delay_ms(500);
}

void turnLeft(){
	leftCount = 0;
 432:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <leftCount+0x1>
 436:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <leftCount>
	rightCount = 0;
 43a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <rightCount+0x1>
 43e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <rightCount>
 442:	87 ea       	ldi	r24, 0xA7	; 167
 444:	91 e6       	ldi	r25, 0x61	; 97
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <turnLeft+0x14>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <turnLeft+0x1a>
 44c:	00 00       	nop
 44e:	06 c0       	rjmp	.+12     	; 0x45c <turnLeft+0x2a>
	_delay_ms(100);
	while(leftCount <=10 && rightCount<=10 ){
		PORTB |= (1<<RF);
 450:	88 b3       	in	r24, 0x18	; 24
 452:	81 60       	ori	r24, 0x01	; 1
 454:	88 bb       	out	0x18, r24	; 24
		PORTA |= (1<<LR);
 456:	8b b3       	in	r24, 0x1b	; 27
 458:	84 60       	ori	r24, 0x04	; 4
 45a:	8b bb       	out	0x1b, r24	; 27

void turnLeft(){
	leftCount = 0;
	rightCount = 0;
	_delay_ms(100);
	while(leftCount <=10 && rightCount<=10 ){
 45c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <leftCount>
 460:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <leftCount+0x1>
 464:	0b 97       	sbiw	r24, 0x0b	; 11
 466:	34 f4       	brge	.+12     	; 0x474 <__stack+0x15>
 468:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightCount>
 46c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightCount+0x1>
 470:	0b 97       	sbiw	r24, 0x0b	; 11
 472:	74 f3       	brlt	.-36     	; 0x450 <turnLeft+0x1e>
		PORTB |= (1<<RF);
		PORTA |= (1<<LR);
	}
	PORTB &= ~(1<<RF);
 474:	88 b3       	in	r24, 0x18	; 24
 476:	8e 7f       	andi	r24, 0xFE	; 254
 478:	88 bb       	out	0x18, r24	; 24
	PORTA &= ~(1<<LR);
 47a:	8b b3       	in	r24, 0x1b	; 27
 47c:	8b 7f       	andi	r24, 0xFB	; 251
 47e:	8b bb       	out	0x1b, r24	; 27
	leftCount = 0;
 480:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <leftCount+0x1>
 484:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <leftCount>
	rightCount = 0;
 488:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <rightCount+0x1>
 48c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <rightCount>
 490:	9f e9       	ldi	r25, 0x9F	; 159
 492:	26 e8       	ldi	r18, 0x86	; 134
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	91 50       	subi	r25, 0x01	; 1
 498:	20 40       	sbci	r18, 0x00	; 0
 49a:	80 40       	sbci	r24, 0x00	; 0
 49c:	e1 f7       	brne	.-8      	; 0x496 <__stack+0x37>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__stack+0x41>
 4a0:	00 00       	nop
 4a2:	08 95       	ret

Disassembly of section .text.turnRight:

000004a4 <turnRight>:
	_delay_ms(500);
}

void turnRight(){
	leftCount = 0;
 4a4:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <leftCount+0x1>
 4a8:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <leftCount>
	rightCount = 0;
 4ac:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <rightCount+0x1>
 4b0:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <rightCount>
 4b4:	87 ea       	ldi	r24, 0xA7	; 167
 4b6:	91 e6       	ldi	r25, 0x61	; 97
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <turnRight+0x14>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <turnRight+0x1a>
 4be:	00 00       	nop
 4c0:	06 c0       	rjmp	.+12     	; 0x4ce <turnRight+0x2a>
	_delay_ms(100);
	while(leftCount <=10 && rightCount<=10 ){
		PORTB |= (1<<LF);
 4c2:	88 b3       	in	r24, 0x18	; 24
 4c4:	80 61       	ori	r24, 0x10	; 16
 4c6:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1<<RR);
 4c8:	88 b3       	in	r24, 0x18	; 24
 4ca:	82 60       	ori	r24, 0x02	; 2
 4cc:	88 bb       	out	0x18, r24	; 24

void turnRight(){
	leftCount = 0;
	rightCount = 0;
	_delay_ms(100);
	while(leftCount <=10 && rightCount<=10 ){
 4ce:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <leftCount>
 4d2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <leftCount+0x1>
 4d6:	0b 97       	sbiw	r24, 0x0b	; 11
 4d8:	34 f4       	brge	.+12     	; 0x4e6 <turnRight+0x42>
 4da:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightCount>
 4de:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightCount+0x1>
 4e2:	0b 97       	sbiw	r24, 0x0b	; 11
 4e4:	74 f3       	brlt	.-36     	; 0x4c2 <turnRight+0x1e>
		PORTB |= (1<<LF);
		PORTB |= (1<<RR);
	}
	PORTB &= ~(1<<LF);
 4e6:	88 b3       	in	r24, 0x18	; 24
 4e8:	8f 7e       	andi	r24, 0xEF	; 239
 4ea:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~(1<<RR);
 4ec:	88 b3       	in	r24, 0x18	; 24
 4ee:	8d 7f       	andi	r24, 0xFD	; 253
 4f0:	88 bb       	out	0x18, r24	; 24
	leftCount = 0;
 4f2:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <leftCount+0x1>
 4f6:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <leftCount>
	rightCount = 0;
 4fa:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <rightCount+0x1>
 4fe:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <rightCount>
 502:	9f e9       	ldi	r25, 0x9F	; 159
 504:	26 e8       	ldi	r18, 0x86	; 134
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	91 50       	subi	r25, 0x01	; 1
 50a:	20 40       	sbci	r18, 0x00	; 0
 50c:	80 40       	sbci	r24, 0x00	; 0
 50e:	e1 f7       	brne	.-8      	; 0x508 <turnRight+0x64>
 510:	00 c0       	rjmp	.+0      	; 0x512 <turnRight+0x6e>
 512:	00 00       	nop
 514:	08 95       	ret

Disassembly of section .text.triggerSonar:

000006e4 <triggerSonar>:
	_delay_ms(500);
}

void triggerSonar(){
	PORTD|=(1<<trigger);
 6e4:	82 b3       	in	r24, 0x12	; 18
 6e6:	81 60       	ori	r24, 0x01	; 1
 6e8:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ea:	85 e0       	ldi	r24, 0x05	; 5
 6ec:	8a 95       	dec	r24
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <triggerSonar+0x8>
	_delay_us(15);
	PORTD &=~(1<<trigger);
 6f0:	82 b3       	in	r24, 0x12	; 18
 6f2:	8e 7f       	andi	r24, 0xFE	; 254
 6f4:	82 bb       	out	0x12, r24	; 18
 6f6:	08 95       	ret

Disassembly of section .text.main:

000000c8 <main>:
	OCR2 = (perc/100)*255;
}

int main(void) {
	//DDRA |= (1<<led) | (1<<PORTA1) | (1<<LR);
	DDRA = 0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	DDRA |= (1<<LR);
  cc:	8a b3       	in	r24, 0x1a	; 26
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	8a bb       	out	0x1a, r24	; 26
	
	
	DDRB |= (1<<RF) | (1<<RR) | (1<<LF);
  d2:	87 b3       	in	r24, 0x17	; 23
  d4:	83 61       	ori	r24, 0x13	; 19
  d6:	87 bb       	out	0x17, r24	; 23
	
	DDRD &= ~(1<<echo);
  d8:	81 b3       	in	r24, 0x11	; 17
  da:	8f 7b       	andi	r24, 0xBF	; 191
  dc:	81 bb       	out	0x11, r24	; 17
	DDRD |= (1<<trigger);
  de:	81 b3       	in	r24, 0x11	; 17
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1<<leftEncoder);
  e4:	81 b3       	in	r24, 0x11	; 17
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1<<rightEncoder);
  ea:	81 b3       	in	r24, 0x11	; 17
  ec:	87 7f       	andi	r24, 0xF7	; 247
  ee:	81 bb       	out	0x11, r24	; 17
	
	// PWM Setup
	DDRB |= (1<<rightPWM);
  f0:	87 b3       	in	r24, 0x17	; 23
  f2:	88 60       	ori	r24, 0x08	; 8
  f4:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<leftPWM);
  f6:	81 b3       	in	r24, 0x11	; 17
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	81 bb       	out	0x11, r24	; 17
	
	TCCR0 = (1<<COM01) | (1<<WGM00) | (1<<WGM01); // set non-inverting Fast PWM mode on timer0
  fc:	88 e6       	ldi	r24, 0x68	; 104
  fe:	83 bf       	out	0x33, r24	; 51
	TCCR2 = (1<<COM21) | (1<<WGM20) | (1<<WGM21); // set non-inverting Fast PWM mode on timer2
 100:	85 bd       	out	0x25, r24	; 37
	TIMSK = (1<<TOIE0) | (1<<TOIE2);
 102:	81 e4       	ldi	r24, 0x41	; 65
 104:	89 bf       	out	0x39, r24	; 57
	OCR0 = (rightDutyCycle/100)*255;
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	48 ec       	ldi	r20, 0xC8	; 200
 10c:	52 e4       	ldi	r21, 0x42	; 66
 10e:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <rightDutyCycle>
 112:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <rightDutyCycle+0x1>
 116:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <rightDutyCycle+0x2>
 11a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <rightDutyCycle+0x3>
 11e:	0e 94 ab 03 	call	0x756	; 0x756 <__divsf3>
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	4f e7       	ldi	r20, 0x7F	; 127
 128:	53 e4       	ldi	r21, 0x43	; 67
 12a:	0e 94 af 03 	call	0x75e	; 0x75e <__mulsf3>
 12e:	0e 94 c0 02 	call	0x580	; 0x580 <__fixunssfsi>
 132:	6c bf       	out	0x3c, r22	; 60
	OCR2 = (leftDutyCycle/100)*255;
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	48 ec       	ldi	r20, 0xC8	; 200
 13a:	52 e4       	ldi	r21, 0x42	; 66
 13c:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 140:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 144:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 148:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 14c:	0e 94 ab 03 	call	0x756	; 0x756 <__divsf3>
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	4f e7       	ldi	r20, 0x7F	; 127
 156:	53 e4       	ldi	r21, 0x43	; 67
 158:	0e 94 af 03 	call	0x75e	; 0x75e <__mulsf3>
 15c:	0e 94 c0 02 	call	0x580	; 0x580 <__fixunssfsi>
 160:	63 bd       	out	0x23, r22	; 35
	
	// setup for Sonar
	TCCR1A = 0;
 162:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1<<ICES1); // detect rising edge
 164:	8e b5       	in	r24, 0x2e	; 46
 166:	80 64       	ori	r24, 0x40	; 64
 168:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<TICIE1);
 16a:	89 b7       	in	r24, 0x39	; 57
 16c:	80 62       	ori	r24, 0x20	; 32
 16e:	89 bf       	out	0x39, r24	; 57
	
	// setup for speed encoders
	GICR |= (1<<INT1) | (1<<INT0); // enable INT0 and INT1
 170:	8b b7       	in	r24, 0x3b	; 59
 172:	80 6c       	ori	r24, 0xC0	; 192
 174:	8b bf       	out	0x3b, r24	; 59
	MCUCR|= (1<<ISC11) | (ISC10) | (1<<ISC01) | (1<<ISC00); // detect changes on rising edge for INT1 and INT0
 176:	85 b7       	in	r24, 0x35	; 53
 178:	8b 60       	ori	r24, 0x0B	; 11
 17a:	85 bf       	out	0x35, r24	; 53
	
	sei();
 17c:	78 94       	sei
	
	 //timer starts for PWM
	 TCCR0 |= (1<<CS00);
 17e:	83 b7       	in	r24, 0x33	; 51
 180:	81 60       	ori	r24, 0x01	; 1
 182:	83 bf       	out	0x33, r24	; 51
	 TCCR2 |= (1<<CS20);
 184:	85 b5       	in	r24, 0x25	; 37
 186:	81 60       	ori	r24, 0x01	; 1
 188:	85 bd       	out	0x25, r24	; 37
	
	// set trigger signal once
	triggerSonar();
 18a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <triggerSonar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	2f e3       	ldi	r18, 0x3F	; 63
 190:	8d e0       	ldi	r24, 0x0D	; 13
 192:	93 e0       	ldi	r25, 0x03	; 3
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0xcc>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0xd6>
 19e:	00 00       	nop
	int thresh = 80;
	//turnLeft();
	_delay_ms(1000);
	//turnLeft();
	moveForward();
 1a0:	0e 94 8b 02 	call	0x516	; 0x516 <moveForward>
	turnLeft();
 1a4:	0e 94 19 02 	call	0x432	; 0x432 <turnLeft>
	moveForward();
 1a8:	0e 94 8b 02 	call	0x516	; 0x516 <moveForward>
	turnRight();
 1ac:	0e 94 52 02 	call	0x4a4	; 0x4a4 <turnRight>
	moveForward();
 1b0:	0e 94 8b 02 	call	0x516	; 0x516 <moveForward>
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <main+0xec>

Disassembly of section .text.__vector_1:

00000622 <__vector_1>:
		//turnRight();
		//moveForward();
	}
}

ISR(INT0_vect) {
 622:	1f 92       	push	r1
 624:	0f 92       	push	r0
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	0f 92       	push	r0
 62a:	11 24       	eor	r1, r1
 62c:	8f 93       	push	r24
 62e:	9f 93       	push	r25
	// left wheel
	PORTA ^= (1<<leftLed);
 630:	9b b3       	in	r25, 0x1b	; 27
 632:	80 e4       	ldi	r24, 0x40	; 64
 634:	89 27       	eor	r24, r25
 636:	8b bb       	out	0x1b, r24	; 27
	leftCount++;
 638:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <leftCount>
 63c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <leftCount+0x1>
 640:	01 96       	adiw	r24, 0x01	; 1
 642:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <leftCount+0x1>
 646:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <leftCount>
}
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	0f 90       	pop	r0
 650:	0f be       	out	0x3f, r0	; 63
 652:	0f 90       	pop	r0
 654:	1f 90       	pop	r1
 656:	18 95       	reti

Disassembly of section .text.__vector_9:

000006f8 <__vector_9>:

ISR(TIMER0_OVF_vect){
 6f8:	1f 92       	push	r1
 6fa:	0f 92       	push	r0
 6fc:	0f b6       	in	r0, 0x3f	; 63
 6fe:	0f 92       	push	r0
 700:	11 24       	eor	r1, r1
	// right
}
 702:	0f 90       	pop	r0
 704:	0f be       	out	0x3f, r0	; 63
 706:	0f 90       	pop	r0
 708:	1f 90       	pop	r1
 70a:	18 95       	reti

Disassembly of section .text.__vector_4:

0000070c <__vector_4>:

ISR(TIMER2_OVF_vect){
 70c:	1f 92       	push	r1
 70e:	0f 92       	push	r0
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	0f 92       	push	r0
 714:	11 24       	eor	r1, r1
	//left
}
 716:	0f 90       	pop	r0
 718:	0f be       	out	0x3f, r0	; 63
 71a:	0f 90       	pop	r0
 71c:	1f 90       	pop	r1
 71e:	18 95       	reti

Disassembly of section .text.__vector_2:

00000658 <__vector_2>:

ISR(INT1_vect){
 658:	1f 92       	push	r1
 65a:	0f 92       	push	r0
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	0f 92       	push	r0
 660:	11 24       	eor	r1, r1
 662:	8f 93       	push	r24
 664:	9f 93       	push	r25
	// right wheel
	PORTA ^= (1<<rightLed);
 666:	9b b3       	in	r25, 0x1b	; 27
 668:	80 e1       	ldi	r24, 0x10	; 16
 66a:	89 27       	eor	r24, r25
 66c:	8b bb       	out	0x1b, r24	; 27
	rightCount++;
 66e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rightCount>
 672:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rightCount+0x1>
 676:	01 96       	adiw	r24, 0x01	; 1
 678:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rightCount+0x1>
 67c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rightCount>
}
 680:	9f 91       	pop	r25
 682:	8f 91       	pop	r24
 684:	0f 90       	pop	r0
 686:	0f be       	out	0x3f, r0	; 63
 688:	0f 90       	pop	r0
 68a:	1f 90       	pop	r1
 68c:	18 95       	reti

Disassembly of section .text.__vector_5:

00000368 <__vector_5>:

ISR(TIMER1_CAPT_vect) {
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	2f 93       	push	r18
 374:	3f 93       	push	r19
 376:	4f 93       	push	r20
 378:	5f 93       	push	r21
 37a:	6f 93       	push	r22
 37c:	7f 93       	push	r23
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	af 93       	push	r26
 384:	bf 93       	push	r27
 386:	ef 93       	push	r30
 388:	ff 93       	push	r31
	if(rising){
 38a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <rising>
 38e:	88 23       	and	r24, r24
 390:	49 f0       	breq	.+18     	; 0x3a4 <__vector_5+0x3c>
		TCCR1B &= ~(1<<ICES1);	// detect falling edge next time
 392:	8e b5       	in	r24, 0x2e	; 46
 394:	8f 7b       	andi	r24, 0xBF	; 191
 396:	8e bd       	out	0x2e, r24	; 46
		TCCR1B |= (1<<CS10);	// start timer
 398:	8e b5       	in	r24, 0x2e	; 46
 39a:	81 60       	ori	r24, 0x01	; 1
 39c:	8e bd       	out	0x2e, r24	; 46
		rising =0;
 39e:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <rising>
 3a2:	36 c0       	rjmp	.+108    	; 0x410 <__DATA_REGION_LENGTH__+0x10>
	}else{
		fallingTime = ICR1;
 3a4:	86 b5       	in	r24, 0x26	; 38
 3a6:	97 b5       	in	r25, 0x27	; 39
 3a8:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <fallingTime+0x1>
 3ac:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <fallingTime>
		TCCR1B |= (1<<ICES1);	// detect rising edge next time
 3b0:	8e b5       	in	r24, 0x2e	; 46
 3b2:	80 64       	ori	r24, 0x40	; 64
 3b4:	8e bd       	out	0x2e, r24	; 46
		rising = 1;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <rising>
		TCCR1B &= ~(1<<CS10);	// stop the timer
 3bc:	8e b5       	in	r24, 0x2e	; 46
 3be:	8e 7f       	andi	r24, 0xFE	; 254
 3c0:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0;
 3c2:	1d bc       	out	0x2d, r1	; 45
 3c4:	1c bc       	out	0x2c, r1	; 44
		distance = (fallingTime)/58;
 3c6:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <fallingTime>
 3ca:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <fallingTime+0x1>
 3ce:	af e9       	ldi	r26, 0x9F	; 159
 3d0:	b6 e4       	ldi	r27, 0x46	; 70
 3d2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__umulhisi3>
 3d6:	92 95       	swap	r25
 3d8:	82 95       	swap	r24
 3da:	8f 70       	andi	r24, 0x0F	; 15
 3dc:	89 27       	eor	r24, r25
 3de:	9f 70       	andi	r25, 0x0F	; 15
 3e0:	89 27       	eor	r24, r25
 3e2:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <distance+0x1>
 3e6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <distance>
		triggerSonar();
 3ea:	0e 94 72 03 	call	0x6e4	; 0x6e4 <triggerSonar>
		if(distance < threshold){
 3ee:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <distance>
 3f2:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <distance+0x1>
 3f6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <threshold>
 3fa:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <threshold+0x1>
 3fe:	28 17       	cp	r18, r24
 400:	39 07       	cpc	r19, r25
 402:	20 f4       	brcc	.+8      	; 0x40c <__DATA_REGION_LENGTH__+0xc>
			obstacle = 1;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <obstacle>
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
			//PORTA |= (1<<led);
		}else{
			obstacle = 0;
 40c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <obstacle>
			//PORTA &= ~(1<<led);
		}
	}
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	bf 91       	pop	r27
 416:	af 91       	pop	r26
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	7f 91       	pop	r23
 41e:	6f 91       	pop	r22
 420:	5f 91       	pop	r21
 422:	4f 91       	pop	r20
 424:	3f 91       	pop	r19
 426:	2f 91       	pop	r18
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

Disassembly of section .text:

00000756 <__divsf3>:
 756:	0e 94 db 00 	call	0x1b6	; 0x1b6 <__divsf3x>
 75a:	0c 94 47 03 	jmp	0x68e	; 0x68e <__fp_round>

Disassembly of section .text:

000001b6 <__divsf3x>:
 1b6:	10 c0       	rjmp	.+32     	; 0x1d8 <__divsf3x+0x22>
 1b8:	0e 94 97 03 	call	0x72e	; 0x72e <__fp_pscB>
 1bc:	58 f0       	brcs	.+22     	; 0x1d4 <__divsf3x+0x1e>
 1be:	0e 94 90 03 	call	0x720	; 0x720 <__fp_pscA>
 1c2:	40 f0       	brcs	.+16     	; 0x1d4 <__divsf3x+0x1e>
 1c4:	29 f4       	brne	.+10     	; 0x1d0 <__divsf3x+0x1a>
 1c6:	5f 3f       	cpi	r21, 0xFF	; 255
 1c8:	29 f0       	breq	.+10     	; 0x1d4 <__divsf3x+0x1e>
 1ca:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__fp_inf>
 1ce:	51 11       	cpse	r21, r1
 1d0:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__fp_szero>
 1d4:	0c 94 b3 03 	jmp	0x766	; 0x766 <__fp_nan>
 1d8:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_split3>
 1dc:	68 f3       	brcs	.-38     	; 0x1b8 <__divsf3x+0x2>

000001de <__divsf3_pse>:
 1de:	99 23       	and	r25, r25
 1e0:	b1 f3       	breq	.-20     	; 0x1ce <__divsf3x+0x18>
 1e2:	55 23       	and	r21, r21
 1e4:	91 f3       	breq	.-28     	; 0x1ca <__divsf3x+0x14>
 1e6:	95 1b       	sub	r25, r21
 1e8:	55 0b       	sbc	r21, r21
 1ea:	bb 27       	eor	r27, r27
 1ec:	aa 27       	eor	r26, r26
 1ee:	62 17       	cp	r22, r18
 1f0:	73 07       	cpc	r23, r19
 1f2:	84 07       	cpc	r24, r20
 1f4:	38 f0       	brcs	.+14     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 1f6:	9f 5f       	subi	r25, 0xFF	; 255
 1f8:	5f 4f       	sbci	r21, 0xFF	; 255
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	44 1f       	adc	r20, r20
 200:	aa 1f       	adc	r26, r26
 202:	a9 f3       	breq	.-22     	; 0x1ee <__divsf3_pse+0x10>
 204:	35 d0       	rcall	.+106    	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 206:	0e 2e       	mov	r0, r30
 208:	3a f0       	brmi	.+14     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 20a:	e0 e8       	ldi	r30, 0x80	; 128
 20c:	32 d0       	rcall	.+100    	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
 20e:	91 50       	subi	r25, 0x01	; 1
 210:	50 40       	sbci	r21, 0x00	; 0
 212:	e6 95       	lsr	r30
 214:	00 1c       	adc	r0, r0
 216:	ca f7       	brpl	.-14     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 218:	2b d0       	rcall	.+86     	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 21a:	fe 2f       	mov	r31, r30
 21c:	29 d0       	rcall	.+82     	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	88 1f       	adc	r24, r24
 224:	bb 1f       	adc	r27, r27
 226:	26 17       	cp	r18, r22
 228:	37 07       	cpc	r19, r23
 22a:	48 07       	cpc	r20, r24
 22c:	ab 07       	cpc	r26, r27
 22e:	b0 e8       	ldi	r27, 0x80	; 128
 230:	09 f0       	breq	.+2      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 232:	bb 0b       	sbc	r27, r27
 234:	80 2d       	mov	r24, r0
 236:	bf 01       	movw	r22, r30
 238:	ff 27       	eor	r31, r31
 23a:	93 58       	subi	r25, 0x83	; 131
 23c:	5f 4f       	sbci	r21, 0xFF	; 255
 23e:	3a f0       	brmi	.+14     	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 240:	9e 3f       	cpi	r25, 0xFE	; 254
 242:	51 05       	cpc	r21, r1
 244:	78 f0       	brcs	.+30     	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
 246:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__fp_inf>
 24a:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__fp_szero>
 24e:	5f 3f       	cpi	r21, 0xFF	; 255
 250:	e4 f3       	brlt	.-8      	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
 252:	98 3e       	cpi	r25, 0xE8	; 232
 254:	d4 f3       	brlt	.-12     	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
 256:	86 95       	lsr	r24
 258:	77 95       	ror	r23
 25a:	67 95       	ror	r22
 25c:	b7 95       	ror	r27
 25e:	f7 95       	ror	r31
 260:	9f 5f       	subi	r25, 0xFF	; 255
 262:	c9 f7       	brne	.-14     	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
 264:	88 0f       	add	r24, r24
 266:	91 1d       	adc	r25, r1
 268:	96 95       	lsr	r25
 26a:	87 95       	ror	r24
 26c:	97 f9       	bld	r25, 7
 26e:	08 95       	ret
 270:	e1 e0       	ldi	r30, 0x01	; 1
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	88 1f       	adc	r24, r24
 278:	bb 1f       	adc	r27, r27
 27a:	62 17       	cp	r22, r18
 27c:	73 07       	cpc	r23, r19
 27e:	84 07       	cpc	r24, r20
 280:	ba 07       	cpc	r27, r26
 282:	20 f0       	brcs	.+8      	; 0x28c <__EEPROM_REGION_LENGTH__+0x8c>
 284:	62 1b       	sub	r22, r18
 286:	73 0b       	sbc	r23, r19
 288:	84 0b       	sbc	r24, r20
 28a:	ba 0b       	sbc	r27, r26
 28c:	ee 1f       	adc	r30, r30
 28e:	88 f7       	brcc	.-30     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
 290:	e0 95       	com	r30
 292:	08 95       	ret

Disassembly of section .text:

00000580 <__fixunssfsi>:
 580:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__fp_splitA>
 584:	88 f0       	brcs	.+34     	; 0x5a8 <__fixunssfsi+0x28>
 586:	9f 57       	subi	r25, 0x7F	; 127
 588:	98 f0       	brcs	.+38     	; 0x5b0 <__fixunssfsi+0x30>
 58a:	b9 2f       	mov	r27, r25
 58c:	99 27       	eor	r25, r25
 58e:	b7 51       	subi	r27, 0x17	; 23
 590:	b0 f0       	brcs	.+44     	; 0x5be <__fixunssfsi+0x3e>
 592:	e1 f0       	breq	.+56     	; 0x5cc <__fixunssfsi+0x4c>
 594:	66 0f       	add	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	88 1f       	adc	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	1a f0       	brmi	.+6      	; 0x5a4 <__fixunssfsi+0x24>
 59e:	ba 95       	dec	r27
 5a0:	c9 f7       	brne	.-14     	; 0x594 <__fixunssfsi+0x14>
 5a2:	14 c0       	rjmp	.+40     	; 0x5cc <__fixunssfsi+0x4c>
 5a4:	b1 30       	cpi	r27, 0x01	; 1
 5a6:	91 f0       	breq	.+36     	; 0x5cc <__fixunssfsi+0x4c>
 5a8:	0e 94 9e 03 	call	0x73c	; 0x73c <__fp_zero>
 5ac:	b1 e0       	ldi	r27, 0x01	; 1
 5ae:	08 95       	ret
 5b0:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_zero>
 5b4:	67 2f       	mov	r22, r23
 5b6:	78 2f       	mov	r23, r24
 5b8:	88 27       	eor	r24, r24
 5ba:	b8 5f       	subi	r27, 0xF8	; 248
 5bc:	39 f0       	breq	.+14     	; 0x5cc <__fixunssfsi+0x4c>
 5be:	b9 3f       	cpi	r27, 0xF9	; 249
 5c0:	cc f3       	brlt	.-14     	; 0x5b4 <__fixunssfsi+0x34>
 5c2:	86 95       	lsr	r24
 5c4:	77 95       	ror	r23
 5c6:	67 95       	ror	r22
 5c8:	b3 95       	inc	r27
 5ca:	d9 f7       	brne	.-10     	; 0x5c2 <__fixunssfsi+0x42>
 5cc:	3e f4       	brtc	.+14     	; 0x5dc <__fixunssfsi+0x5c>
 5ce:	90 95       	com	r25
 5d0:	80 95       	com	r24
 5d2:	70 95       	com	r23
 5d4:	61 95       	neg	r22
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	8f 4f       	sbci	r24, 0xFF	; 255
 5da:	9f 4f       	sbci	r25, 0xFF	; 255
 5dc:	08 95       	ret

Disassembly of section .text:

0000074a <__fp_inf>:
 74a:	97 f9       	bld	r25, 7
 74c:	9f 67       	ori	r25, 0x7F	; 127
 74e:	80 e8       	ldi	r24, 0x80	; 128
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	08 95       	ret

Disassembly of section .text:

00000766 <__fp_nan>:
 766:	9f ef       	ldi	r25, 0xFF	; 255
 768:	80 ec       	ldi	r24, 0xC0	; 192
 76a:	08 95       	ret

Disassembly of section .text:

00000720 <__fp_pscA>:
 720:	00 24       	eor	r0, r0
 722:	0a 94       	dec	r0
 724:	16 16       	cp	r1, r22
 726:	17 06       	cpc	r1, r23
 728:	18 06       	cpc	r1, r24
 72a:	09 06       	cpc	r0, r25
 72c:	08 95       	ret

Disassembly of section .text:

0000072e <__fp_pscB>:
 72e:	00 24       	eor	r0, r0
 730:	0a 94       	dec	r0
 732:	12 16       	cp	r1, r18
 734:	13 06       	cpc	r1, r19
 736:	14 06       	cpc	r1, r20
 738:	05 06       	cpc	r0, r21
 73a:	08 95       	ret

Disassembly of section .text:

0000068e <__fp_round>:
 68e:	09 2e       	mov	r0, r25
 690:	03 94       	inc	r0
 692:	00 0c       	add	r0, r0
 694:	11 f4       	brne	.+4      	; 0x69a <__fp_round+0xc>
 696:	88 23       	and	r24, r24
 698:	52 f0       	brmi	.+20     	; 0x6ae <__fp_round+0x20>
 69a:	bb 0f       	add	r27, r27
 69c:	40 f4       	brcc	.+16     	; 0x6ae <__fp_round+0x20>
 69e:	bf 2b       	or	r27, r31
 6a0:	11 f4       	brne	.+4      	; 0x6a6 <__fp_round+0x18>
 6a2:	60 ff       	sbrs	r22, 0
 6a4:	04 c0       	rjmp	.+8      	; 0x6ae <__fp_round+0x20>
 6a6:	6f 5f       	subi	r22, 0xFF	; 255
 6a8:	7f 4f       	sbci	r23, 0xFF	; 255
 6aa:	8f 4f       	sbci	r24, 0xFF	; 255
 6ac:	9f 4f       	sbci	r25, 0xFF	; 255
 6ae:	08 95       	ret

Disassembly of section .text:

000005de <__fp_split3>:
 5de:	57 fd       	sbrc	r21, 7
 5e0:	90 58       	subi	r25, 0x80	; 128
 5e2:	44 0f       	add	r20, r20
 5e4:	55 1f       	adc	r21, r21
 5e6:	59 f0       	breq	.+22     	; 0x5fe <__fp_splitA+0x10>
 5e8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ea:	71 f0       	breq	.+28     	; 0x608 <__fp_splitA+0x1a>
 5ec:	47 95       	ror	r20

000005ee <__fp_splitA>:
 5ee:	88 0f       	add	r24, r24
 5f0:	97 fb       	bst	r25, 7
 5f2:	99 1f       	adc	r25, r25
 5f4:	61 f0       	breq	.+24     	; 0x60e <__fp_splitA+0x20>
 5f6:	9f 3f       	cpi	r25, 0xFF	; 255
 5f8:	79 f0       	breq	.+30     	; 0x618 <__fp_splitA+0x2a>
 5fa:	87 95       	ror	r24
 5fc:	08 95       	ret
 5fe:	12 16       	cp	r1, r18
 600:	13 06       	cpc	r1, r19
 602:	14 06       	cpc	r1, r20
 604:	55 1f       	adc	r21, r21
 606:	f2 cf       	rjmp	.-28     	; 0x5ec <__fp_split3+0xe>
 608:	46 95       	lsr	r20
 60a:	f1 df       	rcall	.-30     	; 0x5ee <__fp_splitA>
 60c:	08 c0       	rjmp	.+16     	; 0x61e <__fp_splitA+0x30>
 60e:	16 16       	cp	r1, r22
 610:	17 06       	cpc	r1, r23
 612:	18 06       	cpc	r1, r24
 614:	99 1f       	adc	r25, r25
 616:	f1 cf       	rjmp	.-30     	; 0x5fa <__fp_splitA+0xc>
 618:	86 95       	lsr	r24
 61a:	71 05       	cpc	r23, r1
 61c:	61 05       	cpc	r22, r1
 61e:	08 94       	sec
 620:	08 95       	ret

Disassembly of section .text:

0000073c <__fp_zero>:
 73c:	e8 94       	clt

0000073e <__fp_szero>:
 73e:	bb 27       	eor	r27, r27
 740:	66 27       	eor	r22, r22
 742:	77 27       	eor	r23, r23
 744:	cb 01       	movw	r24, r22
 746:	97 f9       	bld	r25, 7
 748:	08 95       	ret

Disassembly of section .text:

0000075e <__mulsf3>:
 75e:	0e 94 4a 01 	call	0x294	; 0x294 <__mulsf3x>
 762:	0c 94 47 03 	jmp	0x68e	; 0x68e <__fp_round>

Disassembly of section .text:

00000294 <__mulsf3x>:
 294:	0f c0       	rjmp	.+30     	; 0x2b4 <__mulsf3x+0x20>
 296:	0e 94 90 03 	call	0x720	; 0x720 <__fp_pscA>
 29a:	38 f0       	brcs	.+14     	; 0x2aa <__mulsf3x+0x16>
 29c:	0e 94 97 03 	call	0x72e	; 0x72e <__fp_pscB>
 2a0:	20 f0       	brcs	.+8      	; 0x2aa <__mulsf3x+0x16>
 2a2:	95 23       	and	r25, r21
 2a4:	11 f0       	breq	.+4      	; 0x2aa <__mulsf3x+0x16>
 2a6:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__fp_inf>
 2aa:	0c 94 b3 03 	jmp	0x766	; 0x766 <__fp_nan>
 2ae:	11 24       	eor	r1, r1
 2b0:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__fp_szero>
 2b4:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_split3>
 2b8:	70 f3       	brcs	.-36     	; 0x296 <__mulsf3x+0x2>

000002ba <__mulsf3_pse>:
 2ba:	95 9f       	mul	r25, r21
 2bc:	c1 f3       	breq	.-16     	; 0x2ae <__mulsf3x+0x1a>
 2be:	95 0f       	add	r25, r21
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	55 1f       	adc	r21, r21
 2c4:	62 9f       	mul	r22, r18
 2c6:	f0 01       	movw	r30, r0
 2c8:	72 9f       	mul	r23, r18
 2ca:	bb 27       	eor	r27, r27
 2cc:	f0 0d       	add	r31, r0
 2ce:	b1 1d       	adc	r27, r1
 2d0:	63 9f       	mul	r22, r19
 2d2:	aa 27       	eor	r26, r26
 2d4:	f0 0d       	add	r31, r0
 2d6:	b1 1d       	adc	r27, r1
 2d8:	aa 1f       	adc	r26, r26
 2da:	64 9f       	mul	r22, r20
 2dc:	66 27       	eor	r22, r22
 2de:	b0 0d       	add	r27, r0
 2e0:	a1 1d       	adc	r26, r1
 2e2:	66 1f       	adc	r22, r22
 2e4:	82 9f       	mul	r24, r18
 2e6:	22 27       	eor	r18, r18
 2e8:	b0 0d       	add	r27, r0
 2ea:	a1 1d       	adc	r26, r1
 2ec:	62 1f       	adc	r22, r18
 2ee:	73 9f       	mul	r23, r19
 2f0:	b0 0d       	add	r27, r0
 2f2:	a1 1d       	adc	r26, r1
 2f4:	62 1f       	adc	r22, r18
 2f6:	83 9f       	mul	r24, r19
 2f8:	a0 0d       	add	r26, r0
 2fa:	61 1d       	adc	r22, r1
 2fc:	22 1f       	adc	r18, r18
 2fe:	74 9f       	mul	r23, r20
 300:	33 27       	eor	r19, r19
 302:	a0 0d       	add	r26, r0
 304:	61 1d       	adc	r22, r1
 306:	23 1f       	adc	r18, r19
 308:	84 9f       	mul	r24, r20
 30a:	60 0d       	add	r22, r0
 30c:	21 1d       	adc	r18, r1
 30e:	82 2f       	mov	r24, r18
 310:	76 2f       	mov	r23, r22
 312:	6a 2f       	mov	r22, r26
 314:	11 24       	eor	r1, r1
 316:	9f 57       	subi	r25, 0x7F	; 127
 318:	50 40       	sbci	r21, 0x00	; 0
 31a:	9a f0       	brmi	.+38     	; 0x342 <__mulsf3_pse+0x88>
 31c:	f1 f0       	breq	.+60     	; 0x35a <__mulsf3_pse+0xa0>
 31e:	88 23       	and	r24, r24
 320:	4a f0       	brmi	.+18     	; 0x334 <__mulsf3_pse+0x7a>
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	bb 1f       	adc	r27, r27
 328:	66 1f       	adc	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	88 1f       	adc	r24, r24
 32e:	91 50       	subi	r25, 0x01	; 1
 330:	50 40       	sbci	r21, 0x00	; 0
 332:	a9 f7       	brne	.-22     	; 0x31e <__mulsf3_pse+0x64>
 334:	9e 3f       	cpi	r25, 0xFE	; 254
 336:	51 05       	cpc	r21, r1
 338:	80 f0       	brcs	.+32     	; 0x35a <__mulsf3_pse+0xa0>
 33a:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__fp_inf>
 33e:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__fp_szero>
 342:	5f 3f       	cpi	r21, 0xFF	; 255
 344:	e4 f3       	brlt	.-8      	; 0x33e <__mulsf3_pse+0x84>
 346:	98 3e       	cpi	r25, 0xE8	; 232
 348:	d4 f3       	brlt	.-12     	; 0x33e <__mulsf3_pse+0x84>
 34a:	86 95       	lsr	r24
 34c:	77 95       	ror	r23
 34e:	67 95       	ror	r22
 350:	b7 95       	ror	r27
 352:	f7 95       	ror	r31
 354:	e7 95       	ror	r30
 356:	9f 5f       	subi	r25, 0xFF	; 255
 358:	c1 f7       	brne	.-16     	; 0x34a <__mulsf3_pse+0x90>
 35a:	fe 2b       	or	r31, r30
 35c:	88 0f       	add	r24, r24
 35e:	91 1d       	adc	r25, r1
 360:	96 95       	lsr	r25
 362:	87 95       	ror	r24
 364:	97 f9       	bld	r25, 7
 366:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000006b0 <__umulhisi3>:
 6b0:	a2 9f       	mul	r26, r18
 6b2:	b0 01       	movw	r22, r0
 6b4:	b3 9f       	mul	r27, r19
 6b6:	c0 01       	movw	r24, r0
 6b8:	a3 9f       	mul	r26, r19
 6ba:	70 0d       	add	r23, r0
 6bc:	81 1d       	adc	r24, r1
 6be:	11 24       	eor	r1, r1
 6c0:	91 1d       	adc	r25, r1
 6c2:	b2 9f       	mul	r27, r18
 6c4:	70 0d       	add	r23, r0
 6c6:	81 1d       	adc	r24, r1
 6c8:	11 24       	eor	r1, r1
 6ca:	91 1d       	adc	r25, r1
 6cc:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000774 <_fini>:
 774:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000776 <__funcs_on_exit>:
 776:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000778 <__simulator_exit>:
 778:	08 95       	ret

Disassembly of section .text.exit:

000006ce <exit>:
 6ce:	ec 01       	movw	r28, r24
 6d0:	0e 94 bb 03 	call	0x776	; 0x776 <__funcs_on_exit>
 6d4:	0e 94 ba 03 	call	0x774	; 0x774 <_fini>
 6d8:	ce 01       	movw	r24, r28
 6da:	0e 94 bc 03 	call	0x778	; 0x778 <__simulator_exit>
 6de:	ce 01       	movw	r24, r28
 6e0:	0e 94 b8 03 	call	0x770	; 0x770 <_Exit>

Disassembly of section .text._Exit:

00000770 <_Exit>:
 770:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>
